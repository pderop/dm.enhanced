Index: org.apache.felix.dependencymanager/src/org/apache/felix/dm/tracker/AbstractTracked.java
===================================================================
--- org.apache.felix.dependencymanager/src/org/apache/felix/dm/tracker/AbstractTracked.java	(revision 1799631)
+++ org.apache.felix.dependencymanager/src/org/apache/felix/dm/tracker/AbstractTracked.java	(working copy)
@@ -185,17 +185,11 @@
 					continue; /* skip this item */
 				}
 				adding.add(item);
-				final AbstractCustomizerActionSet actionSet = trackAdding(item, null);
-				m_executor.schedule(new Runnable() {
-
-					@Override
-					public void run() {
-						actionSet.execute();
-						
-					}
-					
-				});
 			}
+			
+			final AbstractCustomizerActionSet actionSet = trackAdding(item, null);
+			m_executor.schedule(() -> actionSet.execute());
+			
 			if (DEBUG) {
 				System.out.println("AbstractTracked.trackInitial: " + item); //$NON-NLS-1$
 			}
Index: org.apache.felix.dependencymanager/src/org/apache/felix/dm/tracker/ServiceTracker.java
===================================================================
--- org.apache.felix.dependencymanager/src/org/apache/felix/dm/tracker/ServiceTracker.java	(revision 1799631)
+++ org.apache.felix.dependencymanager/src/org/apache/felix/dm/tracker/ServiceTracker.java	(working copy)
@@ -382,10 +382,6 @@
 					/* set tracked with the initial references */
 					t.setInitial(references);
 					
-					// only actually schedules the actions for execution within this synchronized block,
-					// but do the actual execution afterwards.
-					t.trackInitial(); 
-
 				}
 				catch (InvalidSyntaxException e) {
 					throw new RuntimeException(
@@ -396,7 +392,11 @@
 			tracked = t;
 		}
 		/* Call tracked outside of synchronized region */
-		// just trigger the executor
+
+		// schedule trackInitial call: this method will invoke "addingService" customizer callbacks, but will schedule other customizer callbacks (added/modified/removed).
+		t.getExecutor().schedule(() -> t.trackInitial());
+		
+		// Just trigger the execution of everything, but serially.
 		t.getExecutor().execute();
 	}
 
